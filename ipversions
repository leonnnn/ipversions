#!/usr/bin/python3

import sys
import platform
import re
from subprocess import Popen, PIPE

class IPVersionsBase():

    def poll(self):
        pass

    def output(self):
        v4abs, v6abs = list(self.poll())

        print('multigraph ipversions2_rel')
        print('v4.value', v4rel)
        print('v6.value', v6rel, end='\n\n')
        print('multigraph ipversions2_abs')
        print('v4.value', v4abs)
        print('v6.value', v6abs)
        
    @staticmethod
    def config():
        print('multigraph ipversions2_rel')
        print('graph_title IP version distribution - relative')
        print('graph_vlabel traffic in %')
        print('graph_args --base 1000 -r --lower-limit 0 --upper-limit 100')
        print('graph_order v6 v4')
        print('graph_category network')
        print('graph_scale no')
        print('v4abs.label none')
        print('v4abs.type DERIVE')
        print('v4abs.graph no')
        print('v6abs.label none')
        print('v6abs.type DERIVE')
        print('v6abs.graph no')
        print('v6.label IPv6')
        print('v6.draw AREA')
        print('v6.min 0')
        print('v6.cdef 100,v6abs,v6abs,v4abs,+,/,*')
        print('v4.label IPv4')
        print('v4.draw STACK')
        print('v4.min 0')
        print('v4.cdef 100,v4abs,v6abs,v4abs,+,/,*\n')

        print('multigraph ipversions2_abs')
        print('graph_title IP version distribution - absolute')
        print('graph_vlabel traffic in byte/s')
        print('graph_args --base 1024 --lower-limit 0')
        print('graph_order v6 v4')
        print('graph_category network')
        print('graph_scale yes')
        print('v6.type DERIVE')
        print('v6.label IPv6')
        print('v6.draw AREA')
        print('v6.min 0')
        print('v4.type DERIVE')
        print('v4.label IPv4')
        print('v4.draw STACK')
        print('v4.min 0\n')

class IPVersionsFreeBSD(IPVersionsBase):
    netstat = "/usr/bin/netstat"

    def __init__(self):
        super().__init__()

class IPVersionsLinux(IPVersionsBase):
    netstat = "/bin/netstat"

    def __init__(self):
        super().__init__()

    def poll(self):
        lines = self._call_netstat()
        counter4 = self._parse_netstat4(lines)

        lines = self._call_netstat(args=['-6'])
        counter6 = self._parse_netstat6(lines)

        return (counter4, counter6)

    def _call_netstat(self, args=[]) :
        with Popen([self.netstat, "-s"] + args, stdout=PIPE) as proc:
            return proc.stdout.read().decode()

    def _parse_netstat4(self, output_text):
        octets_re = re.compile("\s+(In|Out)Octets:\s+([0-9]+)")
        return sum(int(m.group(2))
            for m in re.finditer(octets_re, output_text))

    def _parse_netstat6(self, output_text):
        octets_re = re.compile("\s+Ip6(In|Out)Octets:\s+([0-9]+)")
        return sum(int(m.group(2))
            for m in re.finditer(octets_re, output_text))


class InvalidArgumentError(ValueError):
    pass

if __name__ == '__main__':

    if sys.argv[1:] == ['config']:
        IPVersionsBase.config()
    elif len(sys.argv) > 1:
        raise InvalidArgumentError
    else:
        backends_dict = {
            'Linux': IPVersionsLinux,
            'FreeBSD': IPVersionsFreeBSD
        }

        try:
            ipversions = backends_dict[platform.system()]()
        except KeyError:
            raise NotImplementedError

        ipversions.output()
